{"version":3,"sources":["reportWebVitals.ts","Counter/Button.tsx","Counter/CounterTitle.tsx","redux/coutnReducer.ts","Counter/Counter.tsx","App.tsx","redux/store.ts","redux/utils.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","name","callBack","disabled","className","onClick","CounterTitle","titleValue","maxValue","minValue","style","color","initialState","Counter","dispatch","useDispatch","useSelector","state","counter","disabledIncrement","disabledClose","disabledError","type","payload","incrementAC","display","flexDirection","alignItems","paddingBottom","paddingRight","onChange","e","newNumber","currentTarget","value","App","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9109dbba.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {FC} from 'react'\r\nimport './counter.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    disabled:boolean\r\n}\r\n\r\nexport const Button: FC<ButtonPropsType> = ({name, callBack,disabled}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n        <button disabled={disabled} className={'btn'}  onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport './counter.css'\r\n\r\ntype CounterTitlePropsType = {\r\n    titleValue: string\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport const CounterTitle: FC<CounterTitlePropsType> = ({titleValue, maxValue, minValue, ...props}) => {\r\n    return (\r\n        <h1 style={+titleValue >= maxValue ? {color: 'red'} : {color: 'black'}} className=\"counterTitle\">\r\n            {titleValue}\r\n        </h1>\r\n    )\r\n}","export type InitialStateType = {\r\n    titleValue: string\r\n    minValue: number\r\n    maxValue: number\r\n}\r\nexport const initialState = {\r\n    titleValue: '5',\r\n    minValue: 0,\r\n    maxValue: 10\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                titleValue: (+action.payload.titleValue + 1) + ''\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state,\r\n                titleValue: '' + state.minValue\r\n            }\r\n        case 'START_VALUE_CHANGE':\r\n            return {\r\n                ...state,\r\n                minValue: action.payload.newNumber\r\n            }\r\n        case 'MAX_VALUE_CHANGE':\r\n            return {\r\n                ...state,\r\n                maxValue: action.payload.newNumber,\r\n\r\n            }\r\n        case 'MIN-TITLE':\r\n            return {\r\n                ...state,\r\n                titleValue: '' + action.payload.newNumber\r\n            }\r\n        case 'ERROR':\r\n            return {\r\n                ...state,\r\n                titleValue: 'PRESS SET!!!'\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype GeneralType = IncrementACType\r\n    | ResetACType\r\n    | StartValueChangeACType\r\n    | MaxValueChangeACType\r\n    | minTitleACType\r\n    | ErrorACType\r\n\r\ntype IncrementACType = ReturnType<typeof incrementAC>\r\nexport const incrementAC = (titleValue: number) => {\r\n    return {\r\n        type: 'INCREMENT',\r\n        payload: {\r\n            titleValue\r\n        }\r\n    } as const\r\n}\r\n\r\ntype ResetACType = ReturnType<typeof resetAC>\r\nexport const resetAC = () => {\r\n    return {\r\n        type: 'RESET',\r\n\r\n    } as const\r\n}\r\n\r\ntype StartValueChangeACType = ReturnType<typeof startValueChangeAC>\r\nexport const startValueChangeAC = (newNumber: number) => {\r\n    return {\r\n        type: 'START_VALUE_CHANGE',\r\n        payload: {newNumber}\r\n    } as const\r\n}\r\ntype MaxValueChangeACType = ReturnType<typeof maxValueChangeAC>\r\nexport const maxValueChangeAC = (newNumber: number) => {\r\n    return {\r\n        type: 'MAX_VALUE_CHANGE',\r\n        payload: {newNumber}\r\n    } as const\r\n}\r\ntype minTitleACType = ReturnType<typeof minTitleAC>\r\nexport const minTitleAC = (newNumber: number) => {\r\n    return {\r\n        type: 'MIN-TITLE',\r\n        payload: {newNumber}\r\n    } as const\r\n}\r\ntype ErrorACType = ReturnType<typeof errorAC>\r\nexport const errorAC = () => {\r\n    return {\r\n        type: 'ERROR',\r\n    } as const\r\n}","import React, {ChangeEvent} from 'react';\r\nimport './counter.css'\r\nimport {Button} from './Button';\r\nimport {CounterTitle} from \"./CounterTitle\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {\r\n    errorAC,\r\n    incrementAC,\r\n    InitialStateType,\r\n    maxValueChangeAC,\r\n    minTitleAC,\r\n    resetAC,\r\n    startValueChangeAC\r\n} from \"../redux/coutnReducer\";\r\n\r\n\r\nexport const Counter = ({...props}) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const {titleValue, maxValue, minValue} = useSelector<AppStateType, InitialStateType>(state => state.counter)\r\n    const disabledIncrement = +titleValue < maxValue ? false : true\r\n    const disabledClose = +titleValue === maxValue ? false : true\r\n    const disabledError = maxValue <= minValue || maxValue < 0 || minValue < 0\r\n\r\n\r\n    const onClickIncrement = () => {\r\n        dispatch(incrementAC(+titleValue))\r\n    }\r\n    const onClickReset = () => {\r\n        dispatch(resetAC())\r\n    }\r\n    const onClickSetHandler = () => {\r\n        dispatch(minTitleAC(minValue))\r\n    }\r\n\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(maxValueChangeAC(+e.currentTarget.value))\r\n        dispatch(errorAC())\r\n    }\r\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(startValueChangeAC(+e.currentTarget.value))\r\n        dispatch(errorAC())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"counterWrapper\">\r\n            <CounterTitle titleValue={titleValue} maxValue={maxValue} minValue={minValue}/>\r\n            <div className=\"counterWrapperBtn\">\r\n                <Button name={'inc'} callBack={onClickIncrement} disabled={disabledIncrement}/>\r\n                <Button name={'reset'} callBack={onClickReset} disabled={disabledClose}/>\r\n            </div>\r\n            <div>\r\n                {maxValue <= minValue || maxValue < 0 || minValue < 0 ?\r\n                    <div className='errorSpan'>data is incorrect</div> : null}\r\n                <div\r\n                    className={maxValue <= minValue || maxValue < 0 || minValue < 0 ? \"errorClass\" : 'normalClass'}>\r\n\r\n                    <div className='formWrapper'>\r\n                        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n                            <label style={{paddingBottom: '5px', display: 'inline-block'}}>\r\n                                <span style={{\r\n                                    display: 'inline-block',\r\n                                    paddingRight: '10px',\r\n                                    color: '#0008ff'\r\n                                }}>Max:</span>\r\n                                <input className='input' onChange={onChangeMaxValue} value={maxValue} type=\"number\"/>\r\n                            </label>\r\n                            <label style={{display: 'block'}}>\r\n                                <span style={{\r\n                                    display: 'inline-block',\r\n                                    paddingRight: '10px',\r\n                                    color: '#0008ff'\r\n                                }}>Min:</span>\r\n                                <input className='input' onChange={onChangeMinValue} value={minValue} type=\"number\"/>\r\n                            </label>\r\n                        </div>\r\n                        <Button name={\"set\"} callBack={onClickSetHandler} disabled={disabledError}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport {Counter} from \"./Counter/Counter\";\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n        <div className=\"appWrapper\">\r\n            <Counter/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {loadState, saveState} from \"./utils\";\r\nimport {counterReducer} from \"./coutnReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store","import {AppStateType} from \"./store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('app-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('app-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './App';\r\nimport {store} from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}