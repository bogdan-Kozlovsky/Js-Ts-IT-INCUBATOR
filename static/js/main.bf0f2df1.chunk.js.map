{"version":3,"sources":["redux/reducer/coutnReducer.ts","component/Button.tsx","component/CounterTitle.tsx","component/Counter.tsx","App.tsx","redux/store.ts","utils/utils.ts","reportWebVitals.ts","index.tsx"],"names":["initialState","titleValue","minValue","maxValue","Button","name","callBack","disabled","type","className","onClick","CounterTitle","style","color","Counter","dispatch","useDispatch","useSelector","state","counter","disabledIncrement","disabledReset","disabledError","payload","incrementAC","onChange","e","newNumber","currentTarget","value","App","rootReducer","combineReducers","action","number","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf0f2df1.chunk.js","sourcesContent":["// type\nexport type InitialStateType = {\n  titleValue: string\n  minValue: number\n  maxValue: number\n}\ntype GeneralType =\n  | ReturnType<typeof incrementAC>\n  | ReturnType<typeof resetAC>\n  | ReturnType<typeof startValueChangeAC>\n  | ReturnType<typeof maxValueChangeAC>\n  | ReturnType<typeof minTitleAC>\n  | ReturnType<typeof errorAC>\n\n// initialState\nexport const initialState = {\n  titleValue: \"0\",\n  minValue: 0,\n  maxValue: 10\n};\n\n// Reducer\nexport const counterReducer = (state: InitialStateType = initialState, action: GeneralType): InitialStateType => {\n  switch (action.type) {\n    case \"INCREMENT\": {\n      const number = 1;\n      return {\n        ...state,\n        titleValue: `${+action.payload.titleValue + number}`\n      };\n    }\n\n    case \"RESET\":\n      return {\n        ...state,\n        titleValue: `${state.minValue}`\n      };\n    case \"START_VALUE_CHANGE\":\n      return {\n        ...state,\n        minValue: action.payload.newNumber\n      };\n    case \"MAX_VALUE_CHANGE\":\n      return {\n        ...state,\n        maxValue: action.payload.newNumber\n\n      };\n    case \"MIN_TITLE\":\n      return {\n        ...state,\n        titleValue: `${action.payload.newNumber}`\n      };\n    case \"ERROR\":\n      return {\n        ...state,\n        titleValue: \"PRESS SET!!!\"\n      };\n    default:\n      return state;\n  }\n};\n\n// Action Creator\nexport const incrementAC = (titleValue: number) => ({\n  type: \"INCREMENT\",\n  payload: { titleValue }\n} as const);\nexport const resetAC = () => ({\n  type: \"RESET\"\n} as const);\nexport const startValueChangeAC = (newNumber: number) => ({\n  type: \"START_VALUE_CHANGE\",\n  payload: { newNumber }\n} as const);\nexport const maxValueChangeAC = (newNumber: number) => ({\n  type: \"MAX_VALUE_CHANGE\",\n  payload: { newNumber }\n} as const);\nexport const minTitleAC = (newNumber: number) => ({\n  type: \"MIN_TITLE\",\n  payload: { newNumber }\n} as const);\nexport const errorAC = () => ({\n  type: \"ERROR\"\n} as const);","import React, { FC } from \"react\";\nimport \"./counter.css\";\n\ntype ButtonPropsType = {\n  name: string;\n  callBack: () => void;\n  disabled: boolean;\n};\n\nexport const Button: FC<ButtonPropsType> = ({ name, callBack, disabled }) => (\n  <button type=\"submit\" disabled={disabled} className=\"btn\" onClick={() => callBack()}>\n    {name}\n  </button>\n);\n","import React, { FC } from \"react\";\nimport \"./counter.css\";\n\ntype CounterTitlePropsType = {\n  titleValue: string;\n  maxValue: number;\n};\n\nexport const CounterTitle: FC<CounterTitlePropsType> = ({ titleValue, maxValue }) => (\n  <h1\n    style={+titleValue >= maxValue ? { color: \"red\" } : { color: \"black\" }}\n    className=\"counterTitle\"\n  >\n    {titleValue}\n  </h1>\n);\n","import React, { ChangeEvent } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  errorAC,\n  incrementAC,\n  InitialStateType,\n  maxValueChangeAC,\n  minTitleAC,\n  resetAC,\n  startValueChangeAC\n} from \"../redux/reducer/coutnReducer\";\nimport { AppStateType } from \"../redux/store\";\n\nimport { Button } from \"./Button\";\nimport { CounterTitle } from \"./CounterTitle\";\nimport \"./counter.css\";\n\nexport const Counter = () => {\n  const dispatch = useDispatch();\n  const { titleValue, maxValue, minValue } = useSelector<AppStateType, InitialStateType>(\n    state => state.counter\n  );\n\n  const disabledIncrement = maxValue <= +titleValue;\n  const disabledReset = +titleValue !== maxValue;\n  const zeroValue = 0;\n  const disabledError =\n    maxValue <= minValue || maxValue < zeroValue || minValue < zeroValue;\n\n  const onClickIncrement = () => {\n    dispatch(incrementAC(+titleValue));\n  };\n  const onClickReset = () => {\n    dispatch(resetAC());\n  };\n  const onClickSetHandler = () => {\n    dispatch(minTitleAC(minValue));\n  };\n\n  const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(maxValueChangeAC(+e.currentTarget.value));\n    dispatch(errorAC());\n  };\n  const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(startValueChangeAC(+e.currentTarget.value));\n    dispatch(errorAC());\n  };\n\n  return (\n    <div className=\"counterWrapper\">\n      <CounterTitle titleValue={titleValue} maxValue={maxValue} />\n\n      <div className=\"counterWrapperBtn\">\n        <Button name=\"inc\" callBack={onClickIncrement} disabled={disabledIncrement} />\n        <Button name=\"reset\" callBack={onClickReset} disabled={disabledReset} />\n      </div>\n      <div>\n        {disabledError && <div className=\"errorSpan\">data is incorrect</div>}\n        <div className={disabledError ? \"errorClass\" : \"normalClass\"}>\n          <div className=\"formWrapper\">\n            <div className=\"formWrapperBox\">\n              <label className=\"formWrapperLabel\">\n                <span className=\"formWrapperSpan\">Max:</span>\n                <input\n                  className=\"input\"\n                  onChange={onChangeMaxValue}\n                  value={maxValue}\n                  type=\"number\"\n                />\n              </label>\n              <label className=\"formWrapperLabel\">\n                <span className=\"formWrapperSpan\">Min:</span>\n                <input\n                  className=\"input\"\n                  onChange={onChangeMinValue}\n                  value={minValue}\n                  type=\"number\"\n                />\n              </label>\n            </div>\n            <Button name=\"set\" callBack={onClickSetHandler} disabled={disabledError} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import \"./App.css\";\n\nimport { Counter } from \"./component/Counter\";\n\nexport const App = () => (\n  <div className=\"appWrapper\">\n    <Counter />\n  </div>\n);\n","import { combineReducers, createStore } from \"redux\";\n\nimport { loadState, saveState } from \"../utils/utils\";\n\nimport { counterReducer } from \"./reducer/coutnReducer\";\n\nconst rootReducer = combineReducers({\n  counter: counterReducer\n});\n\nexport const store = createStore(rootReducer, loadState());\n\nstore.subscribe(() => {\n  saveState({\n    counter: store.getState().counter\n  });\n});\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n","import { AppStateType } from \"../redux/store\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"app-state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: AppStateType) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"app-state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nimport \"./index.css\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport { store } from \"./redux/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\"),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}